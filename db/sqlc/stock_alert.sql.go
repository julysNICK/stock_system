// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: stock_alert.sql

package db

import (
	"context"
	"database/sql"
)

const createStockAlert = `-- name: CreateStockAlert :one
INSERT INTO stock_alerts (
  product_id, 
  supplier_id,
  alert_quantity
) values  (
  $1, $2, $3)
  RETURNING id, product_id, supplier_id, alert_quantity, created_at
`

type CreateStockAlertParams struct {
	ProductID     sql.NullInt64 `json:"productID"`
	SupplierID    sql.NullInt64 `json:"supplierID"`
	AlertQuantity int32         `json:"alertQuantity"`
}

func (q *Queries) CreateStockAlert(ctx context.Context, arg CreateStockAlertParams) (StockAlert, error) {
	row := q.db.QueryRowContext(ctx, createStockAlert, arg.ProductID, arg.SupplierID, arg.AlertQuantity)
	var i StockAlert
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SupplierID,
		&i.AlertQuantity,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStockAlert = `-- name: DeleteStockAlert :exec
  DELETE FROM stock_alerts WHERE id = $1
`

func (q *Queries) DeleteStockAlert(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteStockAlert, id)
	return err
}

const getStockAlert = `-- name: GetStockAlert :one
  SELECT id, product_id, supplier_id, alert_quantity, created_at FROM stock_alerts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStockAlert(ctx context.Context, id int64) (StockAlert, error) {
	row := q.db.QueryRowContext(ctx, getStockAlert, id)
	var i StockAlert
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SupplierID,
		&i.AlertQuantity,
		&i.CreatedAt,
	)
	return i, err
}

const getStockAlertsByProductIdAndSupplierId = `-- name: GetStockAlertsByProductIdAndSupplierId :many
  SELECT id, product_id, supplier_id, alert_quantity, created_at FROM stock_alerts WHERE product_id = $1 AND supplier_id = $2
`

type GetStockAlertsByProductIdAndSupplierIdParams struct {
	ProductID  sql.NullInt64 `json:"productID"`
	SupplierID sql.NullInt64 `json:"supplierID"`
}

func (q *Queries) GetStockAlertsByProductIdAndSupplierId(ctx context.Context, arg GetStockAlertsByProductIdAndSupplierIdParams) ([]StockAlert, error) {
	rows, err := q.db.QueryContext(ctx, getStockAlertsByProductIdAndSupplierId, arg.ProductID, arg.SupplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StockAlert{}
	for rows.Next() {
		var i StockAlert
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SupplierID,
			&i.AlertQuantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStockAlert = `-- name: UpdateStockAlert :one
  UPDATE stock_alerts SET
  alert_quantity = COALESCE($2, alert_quantity)
  WHERE id = $1
  RETURNING id, product_id, supplier_id, alert_quantity, created_at
`

type UpdateStockAlertParams struct {
	ID            int64         `json:"id"`
	AlertQuantity sql.NullInt32 `json:"alertQuantity"`
}

func (q *Queries) UpdateStockAlert(ctx context.Context, arg UpdateStockAlertParams) (StockAlert, error) {
	row := q.db.QueryRowContext(ctx, updateStockAlert, arg.ID, arg.AlertQuantity)
	var i StockAlert
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SupplierID,
		&i.AlertQuantity,
		&i.CreatedAt,
	)
	return i, err
}
