// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: sale.sql

package db

import (
	"context"
	"time"
)

const createSale = `-- name: CreateSale :one
INSERT INTO  sales (
  product_id,
  sale_date,
  quantity_sold

) VALUES (
  $1, $2, $3
)
RETURNING id, product_id, sale_date, quantity_sold, created_at
`

type CreateSaleParams struct {
	ProductID    int64     `json:"productID"`
	SaleDate     time.Time `json:"saleDate"`
	QuantitySold int32     `json:"quantitySold"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale, arg.ProductID, arg.SaleDate, arg.QuantitySold)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SaleDate,
		&i.QuantitySold,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM sales WHERE id = $1
`

func (q *Queries) DeleteSale(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSale, id)
	return err
}

const getSale = `-- name: GetSale :one
SELECT id, product_id, sale_date, quantity_sold, created_at FROM sales WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSale(ctx context.Context, id int64) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSale, id)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.SaleDate,
		&i.QuantitySold,
		&i.CreatedAt,
	)
	return i, err
}

const listSales = `-- name: ListSales :many
SELECT id, product_id, sale_date, quantity_sold, created_at FROM sales ORDER BY id LIMIT $1 OFFSET $2
`

type ListSalesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSales(ctx context.Context, arg ListSalesParams) ([]Sale, error) {
	rows, err := q.db.QueryContext(ctx, listSales, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sale{}
	for rows.Next() {
		var i Sale
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.SaleDate,
			&i.QuantitySold,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
