// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: product.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name, 
  description, 
  category,
  image_url,
  price, 
  store_id,
  supplier_id,
  quantity
) values  (
  $1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at
`

type CreateProductParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Category    string `json:"category"`
	ImageUrl    string `json:"imageUrl"`
	Price       string `json:"price"`
	StoreID     int64  `json:"storeID"`
	SupplierID  int64  `json:"supplierID"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.ImageUrl,
		arg.Price,
		arg.StoreID,
		arg.SupplierID,
		arg.Quantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ImageUrl,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.StoreID,
		&i.SupplierID,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at FROM products WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ImageUrl,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.StoreID,
		&i.SupplierID,
		&i.CreatedAt,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at FROM products WHERE id = $1 LIMIT 1 FOR UPDATE FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductForUpdate, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ImageUrl,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.StoreID,
		&i.SupplierID,
		&i.CreatedAt,
	)
	return i, err
}

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at FROM products WHERE category = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetProductsByCategoryParams struct {
	Category string `json:"category"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetProductsByCategory(ctx context.Context, arg GetProductsByCategoryParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ImageUrl,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.StoreID,
			&i.SupplierID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsWithJoinWithStore = `-- name: GetProductsWithJoinWithStore :many
  SELECT products.id, products.name, products.category, products.image_url, products.description, products.price, products.quantity, products.store_id, products.supplier_id, products.created_at, stores.id, stores.name, stores.address, stores.contact_email, stores.contact_phone, stores.hashed_password, stores.created_at FROM products INNER JOIN stores ON products.store_id = stores.id WHERE products.category = $1
  ORDER BY products.id
  LIMIT $2
  OFFSET $3
`

type GetProductsWithJoinWithStoreParams struct {
	Category string `json:"category"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type GetProductsWithJoinWithStoreRow struct {
	ID             int64     `json:"id"`
	Name           string    `json:"name"`
	Category       string    `json:"category"`
	ImageUrl       string    `json:"imageUrl"`
	Description    string    `json:"description"`
	Price          string    `json:"price"`
	Quantity       int32     `json:"quantity"`
	StoreID        int64     `json:"storeID"`
	SupplierID     int64     `json:"supplierID"`
	CreatedAt      time.Time `json:"createdAt"`
	ID_2           int64     `json:"id2"`
	Name_2         string    `json:"name2"`
	Address        string    `json:"address"`
	ContactEmail   string    `json:"contactEmail"`
	ContactPhone   string    `json:"contactPhone"`
	HashedPassword string    `json:"hashedPassword"`
	CreatedAt_2    time.Time `json:"createdAt2"`
}

func (q *Queries) GetProductsWithJoinWithStore(ctx context.Context, arg GetProductsWithJoinWithStoreParams) ([]GetProductsWithJoinWithStoreRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductsWithJoinWithStore, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsWithJoinWithStoreRow{}
	for rows.Next() {
		var i GetProductsWithJoinWithStoreRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ImageUrl,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.StoreID,
			&i.SupplierID,
			&i.CreatedAt,
			&i.ID_2,
			&i.Name_2,
			&i.Address,
			&i.ContactEmail,
			&i.ContactPhone,
			&i.HashedPassword,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsWithJoinWithSupplierBySupplierId = `-- name: GetProductsWithJoinWithSupplierBySupplierId :many
  SELECT products.id, products.name, products.category, products.image_url, products.description, products.price, products.quantity, products.store_id, products.supplier_id, products.created_at, suppliers.id, suppliers.name, suppliers.address, suppliers.email, suppliers.contact_phone, suppliers.created_at FROM products INNER JOIN suppliers ON products.supplier_id = suppliers.id WHERE products.supplier_id = $1
  ORDER BY products.id
  LIMIT $2
  OFFSET $3
`

type GetProductsWithJoinWithSupplierBySupplierIdParams struct {
	SupplierID int64 `json:"supplierID"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

type GetProductsWithJoinWithSupplierBySupplierIdRow struct {
	ID           int64     `json:"id"`
	Name         string    `json:"name"`
	Category     string    `json:"category"`
	ImageUrl     string    `json:"imageUrl"`
	Description  string    `json:"description"`
	Price        string    `json:"price"`
	Quantity     int32     `json:"quantity"`
	StoreID      int64     `json:"storeID"`
	SupplierID   int64     `json:"supplierID"`
	CreatedAt    time.Time `json:"createdAt"`
	ID_2         int64     `json:"id2"`
	Name_2       string    `json:"name2"`
	Address      string    `json:"address"`
	Email        string    `json:"email"`
	ContactPhone string    `json:"contactPhone"`
	CreatedAt_2  time.Time `json:"createdAt2"`
}

func (q *Queries) GetProductsWithJoinWithSupplierBySupplierId(ctx context.Context, arg GetProductsWithJoinWithSupplierBySupplierIdParams) ([]GetProductsWithJoinWithSupplierBySupplierIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductsWithJoinWithSupplierBySupplierId, arg.SupplierID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsWithJoinWithSupplierBySupplierIdRow{}
	for rows.Next() {
		var i GetProductsWithJoinWithSupplierBySupplierIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ImageUrl,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.StoreID,
			&i.SupplierID,
			&i.CreatedAt,
			&i.ID_2,
			&i.Name_2,
			&i.Address,
			&i.Email,
			&i.ContactPhone,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllProducts = `-- name: ListAllProducts :many
SELECT id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at FROM products ORDER BY id LIMIT $1 OFFSET $2
`

type ListAllProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllProducts(ctx context.Context, arg ListAllProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listAllProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ImageUrl,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.StoreID,
			&i.SupplierID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at FROM products WHERE category = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductsParams struct {
	Category string `json:"category"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ImageUrl,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.StoreID,
			&i.SupplierID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProducts = `-- name: SearchProducts :many
SELECT id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at FROM products WHERE name ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchProducts(ctx context.Context, dollar_1 sql.NullString) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, searchProducts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.ImageUrl,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.StoreID,
			&i.SupplierID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET
name = COALESCE($2, name),
description = COALESCE($3, description),
category = COALESCE($4, category),
image_url = COALESCE($5, image_url),
price = COALESCE($6, price),
quantity = COALESCE($7, quantity),
store_id = COALESCE($8, store_id)
WHERE id = $1
RETURNING id, name, category, image_url, description, price, quantity, store_id, supplier_id, created_at
`

type UpdateProductParams struct {
	ID          int64          `json:"id"`
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Category    sql.NullString `json:"category"`
	ImageUrl    sql.NullString `json:"imageUrl"`
	Price       sql.NullString `json:"price"`
	Quantity    sql.NullInt32  `json:"quantity"`
	StoreID     sql.NullInt64  `json:"storeID"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.ImageUrl,
		arg.Price,
		arg.Quantity,
		arg.StoreID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.ImageUrl,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.StoreID,
		&i.SupplierID,
		&i.CreatedAt,
	)
	return i, err
}
